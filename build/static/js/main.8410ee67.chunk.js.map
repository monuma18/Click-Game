{"version":3,"sources":["components/MatchCard/index.js","components/Wrapper/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["MatchCard","props","className","onClick","removeMatches","id","alt","name","src","image","occupation","location","Wrapper","children","Title","score","bestScore","App","state","matches","correctGuesses","clickMessage","shuffled","sort","Math","random","setState","this","map","matche","key","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wuFA6BeA,MA1Bf,SAAmBC,GACjB,OACE,yBAAKC,UAAU,OAAOC,QAAS,kBAAMF,EAAMG,cAAcH,EAAMI,MAC7D,yBAAKH,UAAU,iBACb,yBAAKI,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,SAEnC,yBAAKP,UAAU,WACb,4BACE,4BACE,yCADF,IAC0BD,EAAMM,MAEhC,4BACE,+CADF,IACgCN,EAAMS,YAEtC,4BACE,6CADF,IAC8BT,EAAMU,c,MCX/BC,MAJf,SAAiBX,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMY,W,MCc1BC,MAff,SAAeb,GACb,OACA,6BACA,wBAAIC,UAAU,SAEZD,EAAMY,UAHR,UAKSZ,EAAMc,MALf,gBAKmCd,EAAMe,Y,OCoC5BC,E,2MAtCbC,MAAQ,CACTC,UACAC,eAAe,EACfJ,UAAU,EACVD,MAAM,EACNM,aAAa,a,EAGZjB,cAAgB,SAAAC,GAIf,IAAMiB,EAAU,EAAKJ,MAAMC,QAAQI,KAAK,kBAAIC,KAAKC,SAAU,KAC1D,EAAKC,SAAS,CAAEP,QAASG,K,wEAIjB,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAOP,MAAOY,KAAKT,MAAMH,MAAOC,UAAWW,KAAKT,MAAMF,WAAtD,gCAECW,KAAKT,MAAMC,QAAQS,IAAI,SAAAC,GAAM,OAC5B,kBAAC,EAAD,CACEzB,cAAe,EAAKA,cACpBC,GAAIwB,EAAOxB,GACXyB,IAAKD,EAAOxB,GACZE,KAAMsB,EAAOtB,KACbE,MAAOoB,EAAOpB,MACdC,WAAYmB,EAAOnB,WACnBC,SAAUkB,EAAOlB,kB,GAhCXoB,aCMEC,QACW,cAA7BC,OAAOtB,SAASuB,UAEe,UAA7BD,OAAOtB,SAASuB,UAEhBD,OAAOtB,SAASuB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8410ee67.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction MatchCard(props) {\n  return (\n    <div className=\"card\" onClick={() => props.removeMatches(props.id)}>\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n      <div className=\"content\">\n        <ul>\n          <li>\n            <strong>Name:</strong> {props.name}\n          </li>\n          <li>\n            <strong>Occupation:</strong> {props.occupation}\n          </li>\n          <li>\n            <strong>Location:</strong> {props.location}\n          </li>\n        </ul>\n      </div>\n      {/* <span onClick={() => props.removeMatches(props.id)} className=\"remove\"> */}\n        \n\n    </div>\n  );\n}\n\nexport default MatchCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return (\n  <div>\n  <h1 className=\"title\">\n   \n   {props.children}</h1>\n   \n   score: {props.score} best score: {props.bestScore}\n  </div>\n\n  )\n\n \n}\n\nexport default Title;\n","import React, { Component } from \"react\";\nimport MatchCard from \"./components/MatchCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport matches from \"./Matches.json\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n matches,\n correctGuesses:0,\n bestScore:0,\n score:0,\n clickMessage:\"game over\"\n  };\n\n  removeMatches = id => {\n    // Filter this.state.friends for matches with an id not equal to the id being removed\n   // const matches = this.state.matches.map(matche => matche.id !== id);\n    \n   const shuffled= this.state.matches.sort(()=>Math.random() -0.5)\n    this.setState({ matches: shuffled });\n  };\n\n  // Make a copy this.state.Match and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n        <Title score={this.state.score} bestScore={this.state.bestScore}   >Clicky React FriendCard List</Title>\n\n        {this.state.matches.map(matche => (\n          <MatchCard\n            removeMatches={this.removeMatches}\n            id={matche.id}\n            key={matche.id}\n            name={matche.name}\n            image={matche.image}\n            occupation={matche.occupation}\n            location={matche.location}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}